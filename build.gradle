import org.apache.tools.ant.filters.*

buildscript {
    repositories {
        jcenter()
        maven { url "http://repo.spring.io/libs-release" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.1.5.RELEASE"
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
    }
}

apply plugin: 'groovy'
apply plugin: 'spring-boot'
apply plugin: 'license'

repositories {
    jcenter()
    maven { url 'http://repo.spring.io/release' }
}

dependencies {
    compile "org.codehaus.groovy:groovy-all:2.4.3"
    compile "org.codehaus.gpars:gpars:1.2.1"
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-data-mongodb"
    compile "org.springframework.boot:spring-boot-starter-social-twitter"
    compile "org.mongodb:mongo-java-driver:3.2.2"
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
    testCompile 'junit:junit:4.11'
    testCompile 'cglib:cglib-nodep:3.1'
    testCompile 'org.objenesis:objenesis:2.1'
    testCompile 'info.cukes:cucumber-junit:1.1.8'
    testCompile 'info.cukes:cucumber-groovy:1.1.8'
    testCompile 'com.github.groovy-wslite:groovy-wslite:0.8.0'
}

test.testLogging.exceptionFormat = 'full'

configurations {
    functTestCompile.extendsFrom testCompile
    functTestRuntime.extendsFrom testRuntime
}

sourceSets {
    funtest {
        groovy.srcDir file('src/funtest/groovy')
        resources.srcDir     file('src/funtest/resources')
        compileClasspath = sourceSets.main.output + sourceSets.test.output + configurations.functTestCompile
        runtimeClasspath = output + compileClasspath + configurations.functTestRuntime
    }
}

processResources {
    filter ReplaceTokens, tokens: ["application.version": project.version]
}

task funtest(type: Test) {
    testClassesDir = sourceSets.funtest.output.classesDir
    classpath = sourceSets.funtest.runtimeClasspath
}

check.dependsOn funtest

jar.archiveName = "application.jar"

license {
	header file('gradle/HEADER')
	strictCheck true
}
